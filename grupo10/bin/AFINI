#!/bin/bash

#- Si el comando devuelve:
#~	0: Se ejecuto correctamente el comando AFINI.
#~ -1: La instalacion no se realizo correctamente.

#~ Obtiene la ruta en donde se encuentra el archivo AFINI.
SCRIPT_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

#~ CONFDIR=$SCRIPT_DIRECTORY/$grupo/"CONFDIR"

CONFIGFILE=`find / -name "AFINSTAL.cnfg" 2>/dev/null`
CONFDIR="$(dirname $CONFIGFILE)"

#~ Se le da permiso de ejecucion a GraLog si no lo tiene y se logea el inicio

logearInicioEjecucion() {
	if [ ! -x GraLog ] ; then
		chmod u+x GraLog
	fi
	./GraLog AFINI "Comando Inicio de Ejecución"
	echo "Comando AFINI Inicio de Ejecución" 
}


#~ Se logea un mensaje indicando que comenzo la ejecucion del comando.
logearFinEjecucion() {
	./GraLog AFINI "Comando Inicio_A Fin de Ejecución"
	echo "Comando AFINI Fin de Ejecución"
}

#~ Se logea un mensaje indicando que el archivo recibido no existe.
logearArchivoFaltante() {
	echo "No se ha encontrado el archivo $@"
	./GraLog AFINI "No se ha encontrado el archivo $@" "ERR"
}

clearScreen(){
	printf "\033c"
}


#~ Extrae las variables de ambiente seteadas por el comando AFINSTAL.sh
extraerVariablesDeInstalacion(){

	local cont=0
	#extraemos el dir de instalacion
	read base < "$CONFDIR/AFINSTAL.cnfg"
	IFS=$'='
	for palabra in $linea; do	
		if [ $cont -eq 1 ] ; then
			$grupo=$palabra
		fi
		let cont++
	done
	
	cont=0
	while read -r linea      
	do
		#Transformamos la linea en tokens
		IFS=$'='
		for aux in $linea; do	
			#extraemos solo los dirs y datos
			if [ $cont -eq 1 ] ; then
				dirs=$dirs" "$aux	
			fi	
			let cont++
		done
		cont=0
		IFS=$'\n'     
	done < "$CONFDIR/AFINSTAL.cnfg"
	
	#~ TODO: grupo
	BINDIR=$(echo $dirs | cut -d " " -f 2)
	MAEDIR=$(echo $dirs | cut -d " " -f 3)
	NOVEDIR=$(echo $dirs | cut -d " " -f 4)
	DATASIZE=$(echo $dirs | cut -d " " -f 5)
	ACEPDIR=$(echo $dirs | cut -d " " -f 6)
	PROCDIR=$(echo $dirs | cut -d " " -f 7)
	REPODIR=$(echo $dirs | cut -d " " -f 8)
	LOGDIR=$(echo $dirs | cut -d " " -f 9)
	LOGEXT=$(echo $dirs | cut -d " " -f 10)
	LOGSIZE=$(echo $dirs | cut -d " " -f 11)
	RECHDIR=$(echo $dirs | cut -d " " -f 12)
	
}

#~ Exporta las variables de ambiente seteadas por el comando AFINSTAL.sh
exportarVariablesDeAmbiente() {
	
	export MAEDIR
	export BINDIR
	export NOVEDIR
	export ACEPDIR
	export RECHDIR
	export PROCDIR
	export REPODIR
	export LOGDIR
	export CONFDIR
	export DATASIZE
	export LOGEXT
	export LOGSIZE
	#~ TODO: grupo
	
}


#~ .
#~ .
verificarInstalacion() {
	
	local INSTALACION_CORRECTA=true
	if [ -z "$MAEDIR" ] || [ ! -f $MAEDIR/CdP.mae ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante $MAEDIR/CdP.mae
	fi
	
	if [ -z "$MAEDIR" ]  ||  [ ! -f $MAEDIR/CdA.mae ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante $MAEDIR/CdA.mae
	fi
	
	if [ -z "$MAEDIR" ]  ||  [ ! -f $MAEDIR/centrales.mae ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante $MAEDIR/centrales.mae
	fi
	
	if [ -z "$MAEDIR" ]  ||  [ ! -f $MAEDIR/agentes.mae ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante $MAEDIR/agentes.mae
	fi
	
	if [ -z "$MAEDIR" ]  ||  [ ! -f $MAEDIR/tllama.tab ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante $MAEDIR/tllama.tab
	fi
	
	if [ -z "$MAEDIR" ]  ||  [ ! -f $MAEDIR/umbral.tab ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante $MAEDIR/umbral.tab
	fi
	
	
	if [ ! -f AFREC ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante "/AFREC"
	fi
	
	if [ ! -f MoverA ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante "/MoverA"
	fi
	
	if [ ! -f Arrancar ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante "/Arrancar"
	fi
	
	if [ ! -f Detener ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante "/Detener"
	fi
	
	if [ ! -f AFLIST ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante "/AFLIST"
	fi
	
	if [ ! -f AFUMB ] ; then
		INSTALACION_CORRECTA=false
		logearArchivoFaltante "/AFUMB"
	fi
	
	echo $INSTALACION_CORRECTA
	
}

#~ Se logea un mensaje indicando que la instalacion no se encuentra completa.
logearInstalacionIncompleta() {
	./GraLog AFINI "La instalacion esta incompleta. Para solucionar el problema debe correr el comando AFINSTAL" "ERR"
	echo "La instalacion esta incompleta. Para solucionar el problema debe correr el comando AFINSTAL"
}

#~ Se logea un mensaje indicando que la instalacion se encuentra completa.
logearInstalacionCompleta() {
	./GraLog AFINI "El sistema se ha instalado correctamente y se encuentra completo."
}

#~ Se logea un mensaje indicando que el comando recibido no cuenta con suficientes permisos para ser ejecutado.
logearPermisoIncorrecto() {
	./GraLog AFINI "El siguiente comando no cuenta con suficientes permisos para ser ejecutado $@" "ERR"
}

#~ Se logea un mensaje indicando que se modificaron los permisos del archivo recibido.
logearCambioPermiso() {
	./GraLog AFINI "Seteando permiso de ejecucion al comando $@"
}

#~ Verifica que los comandos del sistema tengan permisos de ejecucion.
verificarPermisos() {
	
	local PERMISOS_CORRECTOS=true
	
	if [ ! -x GraLog ] ; then
		PERMISOS_CORRECTOS=false
		logearPermisoIncorrecto "/GraLog"
	fi
	
	if [ ! -x MoverA ] ; then
		PERMISOS_CORRECTOS=false
		logearPermisoIncorrecto "/MoverA"
	fi
	
	if [ ! -x Detener ] ; then
		PERMISOS_CORRECTOS=false
		logearPermisoIncorrecto "/Detener"
	fi
	
	if [ ! -x Arrancar ] ; then
		PERMISOS_CORRECTOS=false
		logearPermisoIncorrecto "/Arrancar"
	fi
	
	if [ ! -x AFLIST ] ; then
		PERMISOS_CORRECTOS=false
		logearPermisoIncorrecto "/AFLIST"
	fi

	if [ ! -x AFUMB ] ; then
		PERMISOS_CORRECTOS=false
		logearPermisoIncorrecto "/AFUMB"
	fi

	if [ ! -x AFREC ] ; then
		PERMISOS_CORRECTOS=false
		logearPermisoIncorrecto "/AFREC"
	fi
	
	echo $PERMISOS_CORRECTOS
}

#~ Setea los permisos de ejecucion para los comandos del sistema.
setearPermisos() {
	
	if [ ! -x GraLog ] ; then
		logearCambioPermiso "/GraLog"
		chmod u+x $SCRIPT_DIRECTORY/GraLog
	fi
	
	if [ ! -x MoverA ] ; then
		logearCambioPermiso "/MoverA"
		chmod u+x $SCRIPT_DIRECTORY/MoverA
	fi
	
	if [ ! -x Arrancar ] ; then
		logearCambioPermiso "/Arrancar"
		chmod u+x $SCRIPT_DIRECTORY/Arrancar
	fi
	
	if [ ! -x Detener ] ; then
		logearCambioPermiso "/Detener"
		chmod u+x $SCRIPT_DIRECTORY/Detener
	fi
	
	if [ ! -x AFLIST ] ; then
		logearCambioPermiso "/AFLIST"
		chmod u+x $SCRIPT_DIRECTORY/AFLIST
	fi

	if [ ! -x AFUMB ] ; then
		logearCambioPermiso "/AFUMB"
		chmod u+x $SCRIPT_DIRECTORY/AFUMB
	fi

	if [ ! -x AFREC ] ; then
		logearCambioPermiso "/AFREC"
		chmod u+x $SCRIPT_DIRECTORY/AFREC
	fi
	
}

#~ Se logea un mensaje indicando que los permisos de ejecucion son incorrectos.
logearPermisosIncorrectos() {
	./GraLog AFINI "Los comandos necesarios para la ejecucion del programa no cuentan con permisos suficientes." "ERR"
}

#~ Se logea un mensaje indicando que los permisos de ejecucion son correctos.
logearPermisosCorrectos() {
	./GraLog AFINI "Los comandos necesarios para la ejecucion del programa cuentan con permisos suficientes."
}

#~ Devuelve true si esta seteado el PATH o false si no lo está.
verificarVariablesAmbienteSeteadas() {

	if [[ ! :$PATH: == *:"$SCRIPT_DIRECTORY":* ]] ; then
		echo false
	else
	       echo true
	fi		
}


#~ Agrega la carpeta en donde se encuentra el script al PATH.
setearVariablesAmbiente() {
	if [[ :$PATH: == *:"$SCRIPT_DIRECTORY":* ]] ; then
		echo $SCRIPT_DIRECTORY" ya pertenece al PATH"
	else
		echo "Agregando "$SCRIPT_DIRECTORY" al PATH"
		export PATH=$PATH:$SCRIPT_DIRECTORY
	fi
}

#~ Se le pide al usuario que decida si quiere ejecutar el comando AFREC o no.
usuarioIngresaComandoAFREC() {
	
	read -p "Desea efectuar la activacion  de AFREC? Si - No: "
	local VALOR_INGRESADO=$REPLY
	while [ $VALOR_INGRESADO != si ] && [ $VALOR_INGRESADO != Si ] && [ $VALOR_INGRESADO != no ] && [ $VALOR_INGRESADO != No ] && [ $VALOR_INGRESADO != SI ] && [ $VALOR_INGRESADO != NO ]; do
		./GraLog "AFINI" "Inicio del comando AFREC. El usuario ingresa una opcion invalida: $VALOR_INGRESADO" "WAR"
		read -p "Ingrese una opcion valida (Si - No): "
		VALOR_INGRESADO=$REPLY
	done
	
	if [ $VALOR_INGRESADO = si ] || [ $VALOR_INGRESADO = Si ] || [ $VALOR_INGRESADO = SI ]; then
		echo true
	else
		echo false
	fi
	
}

#~ Muestra por pantalla la lista de archivos en el directorio recibido.
mostrarArchivosDirectorio() {
	
	for file in $@
	do
		if [[ -f $file ]] ; then
			echo " - "$file
		fi
	done
	
}

#~ Muestra el estado del sistema por pantalla.
mostrarEstadoSistema() {
	
	echo "TP SO7508 Segundo Cuatrimestre 2015. Tema A Copyright © Grupo 10"
	
	echo "Directorio de Configuración: $CONFDIR"
	mostrarArchivosDirectorio $CONFDIR/*
	
	echo "Directorio de Ejecutables: $SCRIPT_DIRECTORY"
	mostrarArchivosDirectorio $SCRIPT_DIRECTORY/*

	echo "Directorio de Maestros y Tablas: $MAEDIR"
	mostrarArchivosDirectorio $MAEDIR/*
	
	echo "Directorio de recepción de archivos de llamadas: $NOVEDIR"
	
	echo "Directorio de Archivos de llamadas Aceptados: $ACEPDIR"
	
	echo "Directorio de Archivos de llamadas Sospechosas: $PROCDIR"
			
	echo "Directorio de Archivos de Reportes de llamadas: $REPODIR"
	
	echo "Directorio de Archivos de Log: $LOGDIR"
	mostrarArchivosDirectorio $LOGDIR/*
	
	echo "Directorio de Archivos Rechazados: $RECHDIR"
	
	echo "Estado del Sistema: INICIALIZADO"
	
	if [ ! -z "$(pgrep AFREC)" ] ; then	
		echo "AFREC corriendo bajo el no.: " $(pgrep AFREC)
	else
		echo "El AFREC no esta corriendo."
	fi
	
}

###########################################
########## EJECUCION DEL COMANDO ##########
###########################################

extraerVariablesDeInstalacion
exportarVariablesDeAmbiente

#~ 1 - Inicio de la ejecucion del comando.
logearInicioEjecucion

#~ 2 - Verificar instalador.
export INSTALACION_COMPLETA=$(verificarInstalacion)
INICIALIZACION_COMPLETA=false
if $INSTALACION_COMPLETA ; then
	logearInstalacionCompleta

	#~ Verificacion de los permisos
	PERMISOS_CORRECTOS=$(verificarPermisos)
	if $PERMISOS_CORRECTOS ; then
		logearPermisosCorrectos
	else
		logearPermisosIncorrectos
		setearPermisos	
	fi

	#~ 3 - Verificar inicializacion de ambiente.
	VARIABLES_AMBIENTE_SETEADAS=$(verificarVariablesAmbienteSeteadas)
	if $VARIABLES_AMBIENTE_SETEADAS ; then
		echo "El sistema ya ha sido inicializado. Para volver a ejecutar cierre la sesion y vuelva a iniciarla."
		./GraLog AFINI "El sistema ya ha sido inicializado. La inicialización terminará."
	else 
		setearVariablesAmbiente
	fi

	INICIALIZACION_COMPLETA=true

	#~ 4 - Inicializacion de AFREC
	INICIAR_AFREC=$(usuarioIngresaComandoAFREC)
	if $INICIAR_AFREC ; then
		if [ ! -z "$(pgrep AFREC)" ] ; then
			echo "Demonio ya esta corriendo bajo el no.: " $(pgrep AFREC)
			./GraLog AFINI "El demonio ya esta corriendo en el sistema..."
		else
			./GraLog AFINI "El usuario desea iniciar el comando AFREC. Invocando comando..."
			./Arrancar "AFREC" "AFINI"
			echo "Para detener el demonio se debe ejecutar el comando Detener AFREC"
		fi
	else
		echo "Para iniciar el demonio se debe ejecutar el comando  Arrancar 'AFREC'"
		GraLog AFINI "El usuario no desea iniciar el comando AFREC."
	fi

	mostrarEstadoSistema

else
	logearInstalacionIncompleta
fi

export $INICIALIZACION_COMPLETA

#~ Logear fin de ejecucion.
logearFinEjecucion
