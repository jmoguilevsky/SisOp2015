#!/usr/bin/perl


use 5.010;
use strict;
use warnings;

use File::Spec::Functions;
use Scalar::Util qw(looks_like_number);


#FIXME Agregar filtrar por rango

my $code_rojo = "\x1b[31m";
my $code_negro = "\x1b[0m";


my $mensajeAyuda = <<'END_MESSAGE';
Este es el mensaje de ayuda de AFLIST.pl. 
Para salir de programa utilize Ctrl + C

Para obtener los archivos necesarios, siempre se utilizan los dirctorios
establecidos en las variables de entorno $PROCDIR $REPODIR $MAEDIR.

En caso de encontrarse llamadas repetidas en los archivos de llamadas
sospechosas, se filtraran y se tomarán en cuenta solo una vez
.
Lista de opciones pusibles:

    * -h:
        Imprime este mensaje de ayuda.

    * -r:
        El resultado subconjunto de registros de llamadas sospechosas que 
        resulta luego de la aplicación de los filtros. También puede usar como
        entrada otro archivo anterior.

        Al comenzar pide una lista de archivos que usará para procesar. Estos 
        deben ser ingresados separados de espacios.

        Luego preguntará por filtros a aplicar. Se deberá ingresar a abreviación
        de cada, de a una por vez. Una vez ingresada esta abreviación, procederá
        a mostrar una lista de opciones las cuales serán. Si vuelve a elegir dos
        filtros iguales, siempre queda el mas restrictivo.

    * -s:
        Realiza rankings de sobre los archivos de entrada. Usa los mismos
        filtros para lso archivos que -r.
        Algunos filtros también tienen la opción de ordenar por cantidad de 
        llamadas o duración total.

    * -w:
        Esta flag se puede usar opcionalmente con las flags -h y -r.
        Grabar el resultado en un archivo con nombre finalizado en número
        incremental, para no sobreescribir ningún resultado previo.
END_MESSAGE


use constant MYENUM => qw(UNA VARIAS TODAS);
BEGIN {
    eval "use constant (MYENUM)[$_] => $_;" foreach 0..(MYENUM)-1;
}

my $false = 0;
my $true = 1;

# Hay que configurar estas variables
my $PROCDIR = $ENV{PROCDIR};
my $REPODIR = $ENV{REPODIR};
my $MAEDIR = $ENV{MAEDIR};

# say $PROCDIR;
# say $REPODIR;
# say $MAEDIR;

# Empieza el procesamiento de la entrada

sub error_parametros {
    say 'Parámetros inválidos, use -h para ver la ayuda.';
    exit 0;
}

sub una_varias_todas {

    my $succes;

    while ($true) {
        print "\t".'Varias ó Todas (ingrese la primera letra): ';

        my $in = readline(*STDIN);

        if ($in){
            chomp $in;
            my @options = split / /, $in;

            # say $options[0];

            if (scalar @options != 1){
                say "\t".$code_rojo.'Solo una opción es posible.'.$code_negro;
            } else {
                $options[0] = lc $options[0];
                if ($options[0] eq 'v') {
                    return (MYENUM)[VARIAS];
                } elsif ($options[0] eq 't') {
                    return (MYENUM)[TODAS];
                }
            }
            say "\t".$code_rojo.'Selecione una opción válida'.$code_negro;
        } else {
            say '';
            say 'Debe ingresar por lo menos un caracter';
        }

    }
}



my $write = 0;
my $consulta = 0;
my $stats = 0;

my %params = map { $_ => 1 } @ARGV;


if (exists($params{'-h'})) { 
    if (scalar (@ARGV) !=1 ) {
        error_parametros();
        exit 1;
    }
    say $mensajeAyuda;
    exit 0;
}

# si llegamos hasta acá, la entrada ya no puede haber -h en la entrada

if(exists($params{'-r'})) { 
    if (scalar (@ARGV) == 1) {
        $consulta = 1;
        
    } elsif (scalar (@ARGV) == 2) {
        if (exists($params{'-w'})) {
            $consulta = 1;
            $write = 1;
        } else {
            error_parametros();
        }

    } else {
        error_parametros();
    }

    # exit 0;
} elsif(exists($params{'-s'})) { 
    if (scalar (@ARGV) == 1) {
        $stats = 1;
        
    } elsif (scalar (@ARGV) == 2) {
        if (exists($params{'-w'})) {
            $stats = 1;
            $write = 1;
        } else {
            error_parametros();
        }

    } else {
        error_parametros();
    }

    # exit 0;
} else {
    error_parametros();
}


sub get_aniomes {


    my ($texto) = @_;
    # input, cantidad de pares a encontrar

    # salida, lista de anios meses

    while ($true) {
        # FIXME UNA Y todos es lo mismo
        print $texto;

        my $in = readline(*STDIN);

        if ($in){

            chomp $in;
            my @options = split / /, $in;

            # say $options[0];

            if (scalar @options != 0){
                return @options;
            }         
        } else {
            say 'Debe ingresar por lo menos un caracter';

        }

    }

}


sub get_archivos_carpetas {
    # http://linuxpoison.blogspot.com.ar/2013/01/perl-script-reading-list-of-files-from.html
    my ($nombre_carpeta) = @_;

    opendir(DIR, $nombre_carpeta) || die "Problema al abrir el directorio $nombre_carpeta\n";

    #@filelist = readdir(DIR);
    my @filelist = ();
    my $filename;
    while ($filename = readdir(DIR)) {
        # acá hay que filtrar . y ..
        if ($filename ne '.' and $filename ne '..' and $filename ne 'proc') {
            # print $filename , "\n";
            push (@filelist,$filename);
        }
    }
    closedir(DIR);
    return @filelist;
}



sub filtrar {
    # input: a list of files
    # out: all files that matches input
    # opciones
    my (@archivos) = (@_);
    # my (@archivos) = @_;
    my $result = una_varias_todas();

    my @filtered_list = ();

    if ($result eq (MYENUM)[VARIAS]) {
        say 'varias'; # pedimos mas de una
        # pido un anio mes anio mes anio mes ...
        my @filtros = get_aniomes('Ingrese los filtros como aniomes (separados por espacios): ');
        
        # my $archivo; my $filtro;
        foreach my $archivo (@archivos){
            foreach my $filtro (@filtros){
                # say $filtro . ' ' . $archivo;
                #if ($archivo =~ '\w*_'.$filtro.'\$'){
                if ($archivo =~ "\\w*_$filtro\$"){
                    # agregamos solo los que pasan el filtro
                    # if (not exists($filtered_list{$archivo}) {

                    # }
                    if (not grep $_ eq $archivo, @filtered_list ){
                        push (@filtered_list, $archivo);

                    }

                    # say 'paso' . $filtro . ' ' . $archivo;
                }
            }
        }
        return @filtered_list;

    } elsif ($result eq (MYENUM)[TODAS]) {
        # NoFilter
        # say 'todas';     
        return @archivos;
    }
}

sub filtrar_oficina {
    # input: a list of files
    # out: all files that matches input
    # opciones
    my (@archivos) = (@_);
    # my (@archivos) = @_;
    my $result = una_varias_todas();

    my @filtered_list = ();

    if ($result eq (MYENUM)[UNA]){
        say 'una, no debería existir esto, es lo mismo que varias';
        
        get_aniomes(); # pedimos solo una
        # pido un anio mes

    } elsif ($result eq (MYENUM)[VARIAS]) {
        say 'varias'; # pedimos mas de una
        # pido un anio mes anio mes anio mes ...
        my @filtros = get_aniomes('Ingrese los filtros como oficina (separados por espacios): ');
        
        # my $archivo; my $filtro;
        foreach my $archivo (@archivos){
            foreach my $filtro (@filtros){
                # say $filtro . ' ' . $archivo;
                #say '/\w*'."$filtro".'_\d+\b';
                #if ($archivo =~ "$filtro".'_\d+\b'){
                if ($archivo =~ "^$filtro\_"){
                    # agregamos solo los que pasan el filtro
                    if (not grep $_ eq $archivo, @filtered_list ){
                        push (@filtered_list, $archivo);

                    }
                    # say 'paso ' . $filtro . ' ' . $archivo;
                }
            }
        }
        return @filtered_list;

    } elsif ($result eq (MYENUM)[TODAS]) {
        # NoFilter
        #say 'todas';     
        return @archivos;
    }
}

sub add_if_exist_hash {

    my $hash = shift;
    my $key = shift;
    my %value = %{shift()};
    
    
    if (not exists $hash->{$key}){
        $hash->{$key} = [];
        # say 'No existe';
        #say "tamaño de el array". scalar @{$hash{$key}};
    } else {
        # say 'existe';
    }
    
    push(@{$hash->{$key}}, \%value);
    #say 'lo que está en el archivo'.%value{'central'};
    #say "tamaño de el array". scalar @{$hash->{$key}};
    # append llamada to list
}

sub elegir_filtro {
    my $nombre = shift;
    my $hash = shift;

    my @lista_posibilidades = keys %$hash;

    say 'Seleccionar filtros por ' . (ucfirst $nombre);

    my $result = una_varias_todas();


    if ($result eq (MYENUM)[VARIAS]) {
        say 'A continuación opciones posibles: ';
        foreach (@lista_posibilidades){
            print $_.', ';
        }
        print "\n";
        my @filtros = get_aniomes('Ingrese los filtros usando las opciones atenriores (separados por espacios): ');
        return @filtros;
    } elsif (($result eq (MYENUM)[TODAS])) {
        return @lista_posibilidades;
    }
    
}


sub hash_to_text {
    my $llamadat = shift;
    return ${$llamadat}{'central'} . ';' . 
    ${$llamadat}{'agente'} . ';' . 
    ${$llamadat}{'umbral'} . ';' . 
    ${$llamadat}{'tipo_de_llamada'} . ';' .
    ${$llamadat}{'inicioLlamada'} . ';' .
    ${$llamadat}{'tiempo_de_conv'} . ';' .
    ${$llamadat}{'AreaA'} . ';' . 
    ${$llamadat}{'NumeroA'} . ';' .
    ${$llamadat}{'PaisB'} . ';' .
    ${$llamadat}{'AreaB'} . ';' .
    ${$llamadat}{'NumeroB'} . ';' .
    ${$llamadat}{'FechaArchivo'};
}


sub subllamadas_archivos {

    while ($true) {
        print 'Presiones \'s\' para subllamadas ó \'o\' para archivos de oficinas: ';
        my $in = readline(*STDIN);

        if ($in){

            chomp $in;
            my @options = split / /, $in;

            # say $options[0];

            if (scalar @options == 1){
                if ($options[0] eq 's'){
                    return $true;
                } elsif ($options[0] eq 'o'){
                    return $false;
                }
            }         
        }
        print $code_rojo;
        say "\t".'Debe ingresar por lo menos un caracter y solo una opción válida';
        print $code_negro;       

    }
    # body...
}

sub get_archivos_subllamadas {
    # input: a list of files
    # out: all files that matches input
    # opciones
    my (@archivos) = (@_);
    # my (@archivos) = @_;
    my $result = una_varias_todas();

    my @filtered_list = ();

    if ($result eq (MYENUM)[UNA]){
        say 'una, no debería existir esto, es lo mismo que varias';
        
        get_aniomes(); # pedimos solo una
        # pido un anio mes

    } elsif ($result eq (MYENUM)[VARIAS]) {
        say 'varias'; # pedimos mas de una
        # pido un anio mes anio mes anio mes ...
        my @filtros = get_aniomes('Ingrese el número subllamada.NNN: ');
        
        # my $archivo; my $filtro;
        foreach my $archivo (@archivos){
            foreach my $filtro (@filtros){
                # say $filtro . ' ' . $archivo;
                #say '/\w*'."$filtro".'_\d+\b';
                #if ($archivo =~ "$filtro".'_\d+\b'){
                # say $archivo;
                if ($archivo =~ "subllamada\.$filtro\\b"){
                    # agregamos solo los que pasan el filtro
                    if (not grep $_ eq $archivo, @filtered_list ){
                        say $archivo;
                        push (@filtered_list, $archivo);

                    }
                    # say 'paso ' . $filtro . ' ' . $archivo;
                }
            }
        }
        return @filtered_list;

    } elsif ($result eq (MYENUM)[TODAS]) {
        # NoFilter
        say 'todas';
        foreach my $archivo (@archivos){

        if ($archivo =~ "subllamada\.\\d+\\b"){
            # agregamos solo los que pasan el filtro
            # if (not grep $_ eq $archivo, @filtered_list ){
            say $archivo;
            push (@filtered_list, $archivo);

            }
            # say 'paso ' . $filtro . ' ' . $archivo;
        }
        return @filtered_list;
    }
}

sub get_filtro_tiempo {
    while ($true) {
        print 'Ingrese \'f\' si desea ingresar filtro por tiempo ó \'t\' para seguir: ';
        my @ingresa = get_aniomes('');

        if (scalar @ingresa == 1){
            if ($ingresa[0] eq 'f'){
                return $true;
            } elsif ($ingresa[0] eq 't'){
                return $false;
            }
        }

    }

}

sub get_segundos_llamada{
    while ($true) {
        print 'Ingrese \'s\' si desea ordenar por tiempo ó \'l\' por llamadas: ';
        my @ingresa = get_aniomes('');

        if (scalar @ingresa == 1){
            if ($ingresa[0] eq 's'){
                return $true;
            } elsif ($ingresa[0] eq 'l'){
                return $false;
            }
        }

    }

}

sub pedir_bordes{
    while ($true) {
        say 'Ingrese los números max y min, separados por un espacio';
        my @ingresa = get_aniomes('');

        if (scalar @ingresa == 2){
            if ($ingresa[0] < $ingresa[1]){
                return @ingresa;
            }
        }

    }
}


while ($true) { # para hacer mas de una consulta
    
    #NOTE Cargar hashes

    my $file = catfile($MAEDIR, 'centrales.mae');
    open(my $data, '<', $file) or 
    die "No se pudo abrir el arhcivo '$file' $!\n";
    my  %centrales;
    while (my $line = <$data>) {
        chomp $line;

        # separar líneas
        my @fields = split ";" , $line;
        $centrales{$fields[0]} = $fields[1];
    }

    $file = catfile($MAEDIR, 'agentes.mae');
    open($data, '<', $file) or 
    die "No se pudo abrir el arhcivo '$file' $!\n";
    
    my  %agentes_oficina;
    my  %agentes_mail;
    my  %agentes_id;


    while (my $line = <$data>) {
        chomp $line;

        # separar líneas
        my @fields = split ";" , $line;
        $agentes_id{$fields[2]} = $fields[0];
        $agentes_oficina{$fields[2]} = $fields[3];
        $agentes_mail{$fields[2]} = $fields[4];
    }

    $file = catfile($MAEDIR, 'CdA.mae');
    open($data, '<', $file) or 
    die "No se pudo abrir el arhcivo '$file' $!\n";
    
    my %destino_ciudad;

    while (my $line = <$data>) {
        chomp $line;

        # separar líneas
        my @fields = split ";" , $line;
        $destino_ciudad{$fields[1]} = $fields[0];
    }

    $file = catfile($MAEDIR, 'CdP.mae');
    open($data, '<', $file) or 
    die "No se pudo abrir el arhcivo '$file' $!\n";
    
    my %destino_pais;

    while (my $line = <$data>) {
        chomp $line;

        # separar líneas
        my @fields = split ";" , $line;
        $destino_pais{$fields[0]} = $fields[1];
    }

    my @salida = ();
    my @potenciales;


    # subllamadas o archivos
    my @archivos_filtros;

    my $subllamadas = subllamadas_archivos();
    my $directorio;

    if ($subllamadas){
        @archivos_filtros = get_archivos_carpetas($REPODIR);
        @archivos_filtros = get_archivos_subllamadas(@archivos_filtros);
        $directorio = $REPODIR;
    } else {
        @archivos_filtros = get_archivos_carpetas($PROCDIR);
        
        say "Seleccionar filtros por Oficina:";
        @archivos_filtros = filtrar_oficina(@archivos_filtros);
        say "Seleccionar filtros por Aniomes:";
        @archivos_filtros = filtrar(@archivos_filtros);

        $directorio = $PROCDIR;
    }




    # @archivos_filtros = filtrar(@archivos_filtros);

    if (scalar @archivos_filtros == 0){
        say "Warning: La selección de filtros no dejó ningún archivo para consultar."
    }

    # foreach (@archivos_filtros){
    #     say $_;
    # }

    # para cada línea
    # Creamos los 6 hashes
    my  %porCentral;
    my  %porAgente;
    my  %porUmbral;
    my  %porTipoLlamada;
    my  %porTiempoConv;
    my  %porNumerA;
    my  %porDestino;
    my @todos = ();

    foreach my $archivo (@archivos_filtros){
        # abrir el archivo
        # iteramos y llenamos 5 ha
        my $file = catfile($directorio, $archivo);
        say 'abrí archivo ' . $file;
        
    # abrimos el archivo
        open(my $data, '<', $file) or 
        die "No se pudo abrir el arhcivo '$file' $!\n";
        


        while (my $line = <$data>) {
            chomp $line;

            # separar líneas
            my @fields = split ";" , $line;
            #say '      linea';

            #say $fields[2];

            # modelamos la llamada
            # 0centra
            # 1algente
            # 2idumbral
            # 3Tipo de llamada
            # 4Inicio de llamada
            # 5Tiempo
            # 6AreaA
            # 7NumeroA
            # 8PaisB
            # 9AreaB
            # 10NumeroB
            # 11Fecha
            my  %llamada;
            $llamada{'central'} = $fields[0];
            $llamada{'agente'} = $fields[1];
            $llamada{'umbral'} = $fields[2];
            $llamada{'tipo_de_llamada'} = $fields[3];
            $llamada{'tiempo_de_conv'} = $fields[5];
            $llamada{'NumeroA'} = $fields[6] . $fields[7];
            
            $llamada{'inicioLlamada'} = $fields[4];
            $llamada{'AreaA'} = $fields[6];
            $llamada{'NumeroA'} = $fields[7];
            $llamada{'PaisB'} = $fields[8];
            $llamada{'AreaB'} = $fields[9];
            $llamada{'NumeroB'} = $fields[10];
            $llamada{'FechaArchivo'} = $fields[11];

            $llamada{'Destino'} = $llamada{'PaisB'}.' ' .$llamada{'AreaB'};
            



            # push (@todos, \%llamada);
            push(@todos, hash_to_text(\%llamada));

            # cargamos los hashes
            add_if_exist_hash(\%porCentral, $llamada{'central'}, \%llamada);
            add_if_exist_hash(\%porAgente, $llamada{'agente'}, \%llamada);
            add_if_exist_hash(\%porUmbral, $llamada{'umbral'}, \%llamada);
            add_if_exist_hash(\%porTipoLlamada, $llamada{'tipo_de_llamada'}, \%llamada);
            add_if_exist_hash(\%porTiempoConv, $llamada{'tiempo_de_conv'}, \%llamada);
            add_if_exist_hash(\%porNumerA, $llamada{'NumeroA'}, \%llamada);
            add_if_exist_hash(\%porDestino, $llamada{'PaisB'}.' ' .$llamada{'AreaB'}, \%llamada);
        }
    }

    # usamos los filtros
    # say scalar @todos;
    my @filtros = (
        ['Central', \%porCentral],
        ['Agente', \%porAgente],
        ['umbral', \%porUmbral],
        ['Tipo de llamada', \%porTipoLlamada],
        ['NumeroA', \%porNumerA],
        ['Destino', \%porDestino]
    );

    my @filtros_rankings = (
        ['Central', \%porCentral, \%centrales],
        ['Agente', \%porAgente, \%agentes_mail, \%agentes_oficina, \%agentes_id],
        ['Destino', \%porDestino, \%destino_pais, \%destino_ciudad],
        ['Umbral', \%porUmbral]

    );

    @potenciales = @todos;
    if ($consulta){
        say 'Empezamos por los filtros: ';
        foreach my $filtro (@filtros ){
        # Tipos de filtros:
        #   Filtro por central (una, varias, todas)
        #   Filtro por agente (uno, varios, todos)
        #   Filtro por umbral (uno, varios, todos)
        #   Filtro por tipo de llamada (una, varias, todas)
        #   Filtro por numero A (área y numero de línea) (uno, varios, todos)

            my @tupla = $filtro;
            # say $tupla[0][1];
            # $tupla[0][0] -> nombre
            # $tupla[0][1] -> hash
            my @filtros = elegir_filtro($tupla[0][0], $tupla[0][1]); # me da una lista de claves de has
            
            # sale_filtro = Todas las llamadas de esos filtros (hay repetidos);
            my @sale_filtro = ();
            foreach my $filtro (@filtros){
                foreach my $llamadas ($tupla[0][1]{$filtro}){
                    #say @{$llamada}[0];
                    foreach my $llamadat (@{$llamadas}){
                        push(@sale_filtro, hash_to_text($llamadat));
                    }
                    #if (not grep $_ equ $llamada }) { 
                    #}
                    # falta chequear duplicados
                }
            }

            # foreach my $llamadat (@sale_filtro){
            #     #say hash_to_text($llamadat);
            #     say $llamadat;
            # }

            
            # para cada potencia en potencial:
            @salida = ();
            # say 'entra a potenciales';
            foreach my $llamada_potencia (@potenciales){
            
                # if (not grep $_ eq $archivo, @filtered_list ){
                if (grep $_ eq $llamada_potencia, @sale_filtro){
                    if (not grep $_ eq $llamada_potencia, @salida){
                        push (@salida, $llamada_potencia);
                        # say $llamada_potencia;
                    }
                }            #     sii está en salida en sale_filtro y no está en salida:
            #         agregar en salida:
                
            }

            @potenciales = @salida;
            # si la salida está vacia -> warning la selección quedó vacía

            #itero uno por uno y me fijo si está.

        }

        #NOTE Filtro por tiempo de llamada

        @salida = ();
        my $filtro_tiempo = get_filtro_tiempo();
        # # si puso el filtro
        if ($filtro_tiempo){
            my @bordes = pedir_bordes();
            # pedir bordes
            say $bordes[0].' '.$bordes[1];
            foreach my $llamada (@potenciales){
        #         # split
                my @fields_s = split ";" , $llamada;
                my $tiempo = $fields_s[5];
                # verificar
                # say $tiempo;
                if ($tiempo > $bordes[0]  and $tiempo < $bordes[1]){
                    # si pasa, agragar a salida
                    push(@salida, $llamada);
                }
            }
            @potenciales = @salida;
            
        }
        


        #   Filtro por tiempo de conversación (rango)

        if ($write){
            my $filename = get_new_filename('subllamada');

            # abrir archivo
            open(my $fh, '>', catfile($REPODIR, $filename)) 
            or die "No se pudo abrir el archivo $filename";

            #escribir
            # say "escribo en $filename";
            foreach my $llamadat (@potenciales){

                print $fh ($llamadat . "\n");
                # say $llamadat;
                # <STDIN>
                #say $llamadat;
            }
            close $fh;

        } else {
            @potenciales = sort @potenciales;
            foreach my $llamadat (@potenciales){
                # imprimir
                say $llamadat;
            }
        }
        say 'Cantidad total en esta consulta: ' .  scalar @potenciales;

    }

    if ($stats){

        # elegir el ranking, seleccionando filtros de @filtros
        my $ranking = elegir_ranking(@filtros_rankings);
        say $ranking;

        my @outs_write = ();
        my $pais;
        my $ciudad;
        foreach my $filtro (@filtros_rankings){
            #say @{$filtro};
            my @tupla = $filtro;
            #say $tupla[0][0];
            if ($tupla[0][0] eq $ranking){
                #has analizar está en -> $tupla[0][1]
                #say 'eligio ' . $tupla[0][0];
                my $segundos;
                if ($tupla[0][0] eq 'Agente' or $tupla[0][0] eq 'Central'){
                    say 'debo elegir segundos  llamadas';
                    $segundos = get_segundos_llamada();

                }
                my $hash_ = $tupla[0][1];
                my @claves = keys %$hash_;
                # @claves = sort { (scalar @{%$hash_{$a}}) cmp (scalar @{%$hash_{$b}}) } @claves;
                my @temp = ();
                foreach my $clave (@claves){
                    $pais = %{@{%$hash_{$clave}}[0]}{'PaisB'};
                    $ciudad = %{@{%$hash_{$clave}}[0]}{'AreaB'};
                    my $contador;
                    if ($segundos){
                        $contador = 0;
                        foreach my $llamada_temp (@{%$hash_{$clave}}){
                            $contador = $contador + %$llamada_temp{'tiempo_de_conv'};
                        }
                    } else {
                        $contador = scalar @{%$hash_{$clave}};
                    }
                    push(@temp, [$clave, $contador, $pais, $ciudad] );
                    # say $pais;
                    # say $ciudad;
                    #say $clave . ' ' . scalar @{%$hash_{$clave}};
                }
                #FIXME ordenar por segundos tambien
                @temp = sort {$b->[1] <=> $a->[1]} @temp;

                foreach my $sorted_sorted (@temp){
                    if ($tupla[0][0] eq 'Central') {
                        push(@outs_write, ${$tupla[0][2]}{$sorted_sorted->[0]} . ' (' . $sorted_sorted->[0] . '): ' . $sorted_sorted->[1]);
                        #say ${$tupla[0][2]}{$sorted_sorted->[0]} . ' (' . $sorted_sorted->[0] . '): ' . $sorted_sorted->[1];
                    } elsif ($tupla[0][0] eq 'Agente'){
                        # Mostar además del id del agente, el correo electrónico y la oficina a la que pertenece
                        my $agente = $sorted_sorted->[0];
                        #say ${$tupla[0][4]}{$agente} . ' ' . ${$tupla[0][2]}{$agente} . ' ' . ${$tupla[0][3]}{$agente} . ' ' . $sorted_sorted->[1];
                        push(@outs_write, ${$tupla[0][4]}{$agente} . ' ' . ${$tupla[0][2]}{$agente} . ' ' . ${$tupla[0][3]}{$agente} . ' ' . $sorted_sorted->[1]);
                    } elsif ($tupla[0][0] eq 'Destino'){
                        my $lugar_;
                        if ($sorted_sorted->[2]){
                            if (${$tupla[0][2]}{$sorted_sorted->[2]}){
                                $lugar_ = 'Pais, ' . ${$tupla[0][2]}{$sorted_sorted->[2]} . ' ' . $sorted_sorted->[2];
                            } else {
                                $lugar_ = 'Pais, No se encontró el código';
                            }
                        } else {
                            if (${$tupla[0][3]}{$sorted_sorted->[3]}){
                                $lugar_ = 'Ciudad, ' . ${$tupla[0][3]}{$sorted_sorted->[3]} . ' ' . $sorted_sorted->[3];
                            } else {
                                $lugar_ =  'Ciudad, No se encontró el código';
                            }
                            
                        }
                        # say $lugar_ . ' :' . $sorted_sorted->[1];
                        push(@outs_write, $lugar_ . ' :' . $sorted_sorted->[1]);
                    } elsif ($tupla[0][0] eq 'Umbral'){
                        if ($sorted_sorted->[1] >1 ){
                            #say $sorted_sorted->[0] . ': ' . $sorted_sorted->[1];
                            push(@outs_write, $sorted_sorted->[0] . ': ' . $sorted_sorted->[1]);
                        }
                    }
                    #TODO TIPOS de llamada
                }#@claves = { $a cmp $b } sort @claves;
            }
        }

        # agarrars el hash, ordenas las claves por cual tiene mas cantidades
        # imprimis en orden, buscando los nombres de verdad 

        # sort { $a cmp $b } @words;
        if ($write){

            # buscar archivo
            my $myFile = get_new_filename('estadistica');
            # abrir archivo
            say 'nombre archivo '.$myFile;
            open(my $fh, '>', catfile($REPODIR, $myFile)) 
            or die "No se pudo abrir el archivo $myFile";

            #escribir
            # say "escribo en $filename";
            foreach my $llamadat (@outs_write){

                print $fh ($llamadat . "\n");
                # say $llamadat;
                # <STDIN>
                #say $llamadat;
            }
            close $fh;
            # escribir
            #cerrar
        } else {
            #para cada línea
            foreach my $line_print (@outs_write){
                # imprimir
                say $line_print;
            }
        }
    }

    say "    -\nEmpieza nueva consulta";
}

sub elegir_ranking {
    my @lista_posibilidades = (@_);

    my @opciones = ();

    say 'Seleccionar Ranking a ejectuar, escribir en la consola las siguentes opciones: ';
    foreach my $filtro (@lista_posibilidades){
        #say @{$filtro};
        my @tupla = $filtro;
        push(@opciones, $tupla[0][0]);
        print $tupla[0][0] . ', ';
    }

    say '';

    while ($true) {
        my @eligio = get_aniomes('Indique la elegida: ');
        if (scalar @eligio != 1){
            say 'Elija solo una opción';
        } else {
            my $opcion = $eligio[0];
            # si la opción está en
            # if (not grep $_ eq $archivo, @filtered_list ){
            if (grep $_ eq $opcion, @opciones){
                return $opcion;
            }
        }
    }
    # my $result = una_varias_todas();


    
    # if ($result eq (MYENUM)[VARIAS]) {
    #     say 'A continuación opciones posibles: ';
    #     foreach (@lista_posibilidades){
    #         print $_.', ';
    #     }
    #     print "\n";
    #     my @filtros = get_aniomes('Ingrese los filtros usando las opciones atenriores (separados por espacios): ');
    #     return @filtros;
    # } elsif (($result eq (MYENUM)[TODAS])) {
    #     return @lista_posibilidades;
    # }

}

sub get_new_filename {
    my $name = shift;
    my @candidates = get_archivos_carpetas($REPODIR);
    my $max = -1;
    foreach my $filename (@candidates){
        # say $filename;
        if ($filename =~ s/$name\.(\d+)$//g){
            #my $numero =~ s/[^0-9]//g;
            my $numero = $1;
            # say 'numero '. $numero;
            if ($numero > $max){
                $max = $numero + 0;
            }
        }
        # check if matches
        # if matches -> keep track of maximum

    }
    return "$name." . ($max+1);
}
 

#FIXME falta un filtro (que si se puede hacer, en consulta)
#FIXME filtro que falta en estadisticas
#FIXME guardar en estadística

#FIXME que no se puedan abrir dos de estos procesos
#FIXME obtener oficinas?
#NOTE chequear expresiones regulares viejas
#FIXME Sacar el Uno todos varios aniomes