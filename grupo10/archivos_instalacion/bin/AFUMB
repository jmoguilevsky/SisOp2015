#!/bin/bash
#ACEPDIR="/home/joni/Facu/Sisop/tp/gitProj/SisOp2015/grupo10/aceptadas"
#PROCDIR="procesados"
#RECHDIR="rechazados"
#MAEDIR="maedir"

LLAMADAS_ACEPTADAS=$(ls $ACEPDIR/*)
CODIGOS_PAIS=$MAEDIR/CdP.mae
CODIGOS_AREA=$MAEDIR/CdA.mae
CENTRALES=$MAEDIR/CdC.mae
AGENTES=$MAEDIR/agentes.mae
TIPOS_LLAMADAS=$MAEDIR/tllama.tab
UMBRALES=$MAEDIR/umbral.tab

LOGCOM="AFUMB"

function log(){
	GraLog $LOGCOM $1 $2
}

function determinar_tipo_llamada(){
	#Funcion que determina si el tipo de llamada es DDI, DDN o LOC. Devuelve un string con la respuesta o "NULO" si no corresponde a ninguna de las clasificaciones
	#Param1: codigo de area de la llamada de origen
	#Param2: codigo de area del destino
	#Param3: codigo de pais de destino
	#Param4: numero de linea de destino
	local suma=$2$4
	local msg_ret
	if [ ! "$4" ]; then
		msg_ret="NULO"
	elif [ "$1" = "$2" ] && [ ${#suma} = 10 ]; then
		msg_ret="LOC"
	elif [ "$1" != "$2" ] && [ ${#suma} = 10 ]; then
		msg_ret="DDN"
	elif [ ! "$3" ]; then
		msg_ret="NULO"
	elif grep -Fqw "$3" "$CODIGOS_PAIS" && [ "$1" != "$2" ]; then
		msg_ret="DDI"
	else
		msg_ret="NULO"
	fi
	echo "$msg_ret"
}

function rechazar_registro(){
	#Funcion que se encarga de guardar la informacion de un registro rechazado en $RECHDIR/llamadas/$central.rech
	#Param1: array con los datos del registro pasada por nombre
	#Param2: mensaje con la razon del rechazo del registro
	#Param3: nombre base del archivo que contenia al registro invalido
	local name=$1[@]
    local array=("${!name}")
	mkdir -p "$RECHDIR/llamadas"
	local delim=";"
	local string=$3$delim$2
	for camp in "${array[@]}"
	do
		string+=$delim$camp
	done
	echo "$string" >> "$RECHDIR/llamadas/$central.rech"
}

function determinar_umbral_tope(){
	#Funcion que devuelve el id de un umbral ACTIVO y su tope de minutos separados por ";".
	#Si no encuentra un umbral activo devuelve "Inactivo;0".
	#Si hay mas de un umbral el criterio de seleccion es el ultimo umbral dentro del archivo
	#Param1: area de origen
	#Param2: numero de linea de origen
	#Param3: tipo de llamada
	#Param4: area de destino
	#Param5: pais de destino

	local ret="Inactivo;0"
	while IFS='' read -r linea || [[ -n "$linea" ]]; do
		IFS=';' read -a arreglo <<< "$linea"
		local id_del_umbral=${arreglo[0]}
		local area_origen=${arreglo[1]}
		local numero_origen=${arreglo[2]}
		local tipo_de_llamada=${arreglo[3]}
		local codigo_destino=${arreglo[4]}
		local tope=${arreglo[5]}
		local estado=${arreglo[6]}

		if [ "$area_origen" == "$1" ] && [ "$numero_origen" == "$2" ] && [ "$tipo_llamada" == "$3" ]; then
			if [ ! "$codigo_destino" ]; then
				if [ "$estado" == "Activo" ]; then
					ret="$id_del_umbral;$tope"
					#echo "$id_del_umbral" >&1
				else
					ret="Inactivo;0"
				fi
			elif [ "$codigo_destino" == "$4" ] || [ "$codigo_destino" == "$5" ]; then
				if [ "$estado" == "Activo" ]; then
					ret="$id_del_umbral;$tope"
					#echo "$id_del_umbral" >&1
				else
					ret="Inactivo;0"
				fi
			fi
		fi	
	done < "$UMBRALES"
	echo "$ret"
}

function obtener_oficina(){
	#Funcion que devuelve la oficina correspondiente a la id del agente pasado por parametro.
	#Devuelve un string vacio si no fue encontrado.
	#Param1: id del agente cuyo oficina se quiere saber.
	local r=""
	while IFS='' read -r lin || [[ -n "$lin" ]]; do
		IFS=';' read -a reg <<< "$lin"
		local agente_id=${reg[2]}
		local agente_oficina=${reg[3]}
		if [ "$agente_id" == "$1" ]; then
			r="$agente_oficina"
		fi
	done < "$AGENTES"
	echo "$r"
}

log "Inicio de AFUMB" INFO 
log "Cantidad de archivos a procesar: $(ls $ACEPDIR/ | wc -l)" INFO

LLAMADAS_ORDENADAS=$( ls $LLAMADAS_ACEPTADAS | sort -n -t _ -k 2) #n sort numerico, -t _ separador, -k 1 sortear segun la columna 2 (las fechas)
for i in $LLAMADAS_ORDENADAS; do
	#Checkear si la primera linea es valida:
	primer_linea=$(head -1 $i | grep '.*;.*;.*;.*;.*;.*;.*;.*$' )
	if [ -z "$primer_linea" ]; then
		log "Se RECHAZA el archivo $i porque su estructura no se corresponde con el formato esperado." WAR
		. MoverA $ACEPDIR/$base $RECHDIR
		continue
	fi
	#Checkear si el archivo esta duplicado
	base=$(basename "$i")
	if [ -f $PROCDIR/$base ]; then
		log "Se rechaza el archivo $base por estar DUPLICADO" WAR
		. MoverA $ACEPDIR/$base $RECHDIR
		continue
	fi
	#Obtengo el nombre de la central
	IFS='_' read -a arr_centrales <<< "$base"
	central="${arr_centrales[0]}"
	aux="${arr_centrales[1]}"
	fecha_input=${aux:0:8}
	#Itero el archivo registro por registro validandolos:
	cantidad_rechazados=0
	cantidad_procesados=0
	cantidad_con_umbral=0
	cantidad_sin_umbral=0
	cantidad_sospechosas=0
	cantidad_no_sospechosas=0
	log "Archivo a procesar: $base" "INFO"
	while IFS='' read -r line || [[ -n "$line" ]]; do
		IFS=';' read -a arr <<< "$line"
		id_agente=${arr[0]}
		fecha=${arr[1]}
		tiempo_conversacion=${arr[2]}
		area_a=${arr[3]}
		linea_a=${arr[4]}
		pais_b=${arr[5]}
		area_b=${arr[6]}
		linea_b=${arr[7]}

		cantidad_procesados=$[cantidad_procesados + 1]
		#verifico que existe el codigo de area del origen de la llamada
		if grep -Fqw "$area_a" "$CODIGOS_AREA"
		then
			oficina=$(obtener_oficina "$id_agente")
			concat=$area_a$linea_a
			tipo_llamada=$(determinar_tipo_llamada "$area_a" "$area_b" "$pais_b" "$linea_b")
			#Verifico la existencia de la oficina
			if [ -z "$oficina" ]; then
				cantidad_rechazados=$[cantidad_rechazados + 1]
				rechazar_registro arr "El registro no posee un id de agente valido." "$base"
			#Verifico que el numero de origen sea valido
			elif [ ${#concat} != 10 ]; then
				cantidad_rechazados=$[cantidad_rechazados + 1]
				rechazar_registro arr "El registro no posee un numero y codigo de origen validos (que sumen 10 caracteres)" "$base"
			#Verifico que el tiempo sea un numero mayor o igual a cero
			elif [ 0 -gt "$tiempo_conversacion" ]; then
				cantidad_rechazados=$[cantidad_rechazados + 1]
				rechazar_registro arr "El registro no posee un tiempo de conversacion mayor o igual a cero." "$base"
			#Verifico que sea un tipo de llamada valido
			elif [ "${tipo_llamada}" == 'NULO' ]; then
				cantidad_rechazados=$[cantidad_rechazados + 1]
				rechazar_registro arr "El registro no clasifica bajo ningun tipo de llamada o el destino no es valido." "$base"
			else
				#La llamada es valida, luego averiguo si tiene un umbral activo sobre ella.
				umbral_tope=$(determinar_umbral_tope "$area_a" "$linea_a" "$tipo_llamada" "$area_b" "$pais_b")
				IFS=';' read -a tupla <<< "$umbral_tope"
				id_umbral=${tupla[0]}
				tope=${tupla[1]}
				if [ "$id_umbral" == "Inactivo" ]; then
					cantidad_sin_umbral=$[cantidad_sin_umbral + 1]
				else
					#Se encontro un umbral activo, veo si la duracion excede el tope y luego es sospechosa.
					cantidad_con_umbral=$[cantidad_con_umbral + 1]
					if [ "$tope" -lt "$tiempo_conversacion" ]; then
						#Es sospechosa, la guardo
						cantidad_sospechosas=$[cantidad_sospechosas + 1]
						mes=${fecha:3:2}
						anio=${fecha:6:4}
						camp="$central;$id_agente;$id_umbral;$tipo_llamada;$fecha;$tiempo_conversacion;$area_a;$linea_a;$pais_b;$area_b;$linea_b;$fecha_input"
						n="_"
						echo "$camp" >> "$PROCDIR/$oficina$n$anio$mes"
					else
						cantidad_no_sospechosas=$[cantidad_no_sospechosas + 1]
					fi
				fi
			fi
		else
			rechazar_registro arr "El codigo de area de origen no es valido." "$base"
			cantidad_rechazados=$[cantidad_rechazados + 1]
		fi
	done < "$i"
	MoverA $ACEPDIR/$base $PROCDIR
	echo "Cantidad de llamadas = $cantidad_procesados: Rechazadas $cantidad_rechazados, Con umbral $cantidad_con_umbral, Sin umbral $cantidad_sin_umbral"
	echo "Cantidad de llamadas sospechosas = $cantidad_sospechosas, no sospechosas $cantidad_no_sospechosas"
	log "procesados: $cantidad_procesados" "INFO"
	log "rechazados: $cantidad_rechazados" "INFO"
	log "con umbral: $cantidad_con_umbral" "INFO"
	log "sin umbral: $cantidad_sin_umbral" "INFO"
	log "sospechosas: $cantidad_sospechosas" "INFO"
	log "no sospechosas: $cantidad_no_sospechosas" "INFO"
done

log "Fin de AFUMB" INFO

